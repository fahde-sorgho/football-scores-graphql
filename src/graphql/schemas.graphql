#Base Types
type Season {
    id: ID,
    currentMatchday: Int
}

type Base {
    id: ID,
    name: String
}

type Competition {
    id: ID,
    name: String,
    area: Base,
    currentSeason: Season
}

type Team{
    id: ID,
    name: String,
    area: Base
    tla: String,
    founded: Int,
    venue: String
}

type Player{
    id: ID,
    name: String,
    dateOfBirth: String,
    nationality: String,
    position: String,
}


#Match Types
type ScoreSlice{
    homeTeam: Int,
    awayTeam: Int
}

type Score{
    winner: String,
    duration: String,
    fullTime: ScoreSlice,
    extraTime: ScoreSlice,
    penalties: ScoreSlice
}

type MatchActor{
    id: ID,
    name: String,
    position: String,
    shirtNumber: Int
}

type MatchTeam{
    id: ID,
    name: String,
    coach: MatchActor,
    captain: MatchActor,
    lineup: [MatchActor],
    bench: [MatchActor]
}

type MatchGoal{
    minute: Int,
    team: MatchTeam,
    scorer: MatchActor,
    assist: MatchActor
}

type Match{
    id: ID,
    season: Season,
    matchday: Int,
    status: String,
    utcDate: String,
    score: Score,
    awayTeam: MatchTeam,
    homeTeam: MatchTeam,
    goals: [MatchGoal],
}

#Standing
type TableElement{
    position: Int,
    team: Base,
    playedGames: Int,
    won: Int,
    draw: Int,
    lost: Int,
    points: Int,
    goalsFor: Int,
    goalsAgainst: Int,
    goalDifference: Int
}

type Standing {
    id: ID,
    stage: String,
    type: String,
    table: [TableElement]
}

#Scorer
type Scorer{
    player: Player,
    team: Base,
    numberOfGoals: Int
}

#Queries
type Query {
    competition(id: Int!): Competition
    competitions: [Competition]
    team(id: Int!): Team
    teams(competitionId: Int!): [Team]
    match(id: Int!): Match
    matches(competitionId: Int!, matchday: Int): [Match]
    standings(type:String, competitionId: Int!): [Standing]
    scorers(competitionId: Int!): [Scorer]
    player(id: Int!): Player
}